-----------------------------------------------------------------------------------------------------
-> NÍVEIS DE TESTES
Unidade
Integração
Sistema
Regressão
Aceitação

Unidade
-Momento de realizar testes sobre as pequenas unidades do software. Cada parte específica do método
(JUunit - Java)

Integração
-Voltado para uma unidade maior do software (conexão com o banco de dados, APIs). Teste de alto nível

Sistema
-Após o deploy em ambiente de HML, ocorre essa validação direta no ambiente

Regressão
- Reavaliar se as novas features não estão quebrando as funcionalidades antigas do software
AUTOMAÇÃO DE TESTE: SELENIUM

-----------------------------------------------------------------------------------------------------
-> TÉCNICAS DE TESTES
Caixa Branca
Caixa Preta
Caixa Cinza

Caixa Branca (Conhecendo o código-fonte)
-Também conhecido cmo teste estrutural
-Validar dados, controles, fluxos, chamadas
-Garantir a qualidade da implementação


Caixa Preta (Sem conhecimento sobre o código fonte)
-Teste funcional
-Verificar saídas usando vários tipos de entrada
-Teste sem conhecer a estrutura interna do software
-Níveis: Integração, Sistema, aceitação

Caixa cinza (Mescla entre as técnicas de caixa branca e caixa preta)
-Analisa parte lógica e também funcionalidade
-Ter acesso a documentação do funcionamento do código
-Engenharia reversa
-----------------------------------------------------------------------------------------------------
TESTES NÃO FUNCIONAIS

Testes não funcionais estão ligados a requisitos não funcionais
1) Comportamento do sistema
2) Performace
3) Escalabilidade
4) Segurança
5) Infraestrutura

----------------------------------------------------------------------------------------------------
TESTE DE CARGA

O teste de carga é realizado para verificar qual o volume de transações, acessos silmuâneos ou usuários
que um servidor/software/sistema suporta. Alguns pontos de atenção:

Objetivo para clareza de resultados
Ambiente
Cenários
Execução de testes
Análise de resultado
----------------------------------------------------------------------------------------------------
TESTE DE STRESS

Teste de stress é realizado para submeter o software a situações extremas. Basicamente, o teste de stresss
baseia-se em testar os limites do software e avaliar seu comportamento

----------------------------------------------------------------------------------------------------
TESTE DE SEGURANÇA (PENTEST)

Teste que visa detectar vulnerabilidades em sistemas, software, redes e aplicativos

----------------------------------------------------------------------------------------------------
PIRÂMIDE DE TESTE

1)UI Tests
2)Service Tests
3)Unit Tests

UI TESTS (Testes de Interface do Usuário)

O que são: Validam o sistema a partir da perspectiva do usuário final, testando fluxos completos na interface (web, mobile, desktop).
Exemplo: Abrir a tela de login, digitar usuário e senha e verificar se o acesso funciona corretamente.

Características:
Cobrem todo o sistema de ponta a ponta. São mais lentos de rodar e mais caros de manter. Devem ser poucos, focados em validar os principais fluxos críticos de negócio.


Service Tests (Testes de Serviço / Integração / API)

O que são: Validam a comunicação e o comportamento entre diferentes módulos, serviços ou APIs.
Exemplo: Enviar uma requisição REST para o endpoint de criação de usuário e verificar se a resposta está correta e se o usuário foi salvo.

Características:
Testam a lógica de negócio sem passar pela interface. Mais rápidos e estáveis que os de UI.
Servem para garantir que módulos e serviços funcionem bem em conjunto. Normalmente ocupam o "meio" da pirâmide, em quantidade média.


Unit Tests (Testes Unitários)

O que são: Validam pequenas partes isoladas do código (funções, classes, métodos).
Exemplo: Testar se uma função de cálculo de desconto retorna o valor correto dado um preço e uma porcentagem.

Características:
São rápidos, baratos e fáceis de automatizar.
Não dependem de banco de dados, rede ou interface.
Devem ser a base da pirâmide, com maior quantidade.
Fornecem feedback rápido aos desenvolvedores.